Option Explicit

' 関数名: DBテーブル作成
' 引数: tsvFilePath As String - TSVファイルの絶対パス
' 機能: TSVファイルを読み込み、SQL Server用のテーブル作成SQLを生成し、TSVファイルと同じフォルダにYYYYMMDD_hhmmss.sqlとして出力
Sub CreateDBTable(tsvFilePath As String)
    On Error GoTo ErrorHandler
    
    Dim fso As Object
    Dim ts As Object
    Dim outputFile As Object
    Dim tableName As String
    Dim sqlContent As String
    Dim columns() As String
    Dim pkColumns() As String
    Dim line As String
    Dim lineCount As Long
    Dim i As Long
    Dim outputPath As String
    Dim colName As String
    Dim colType As String
    Dim colLength As String
    Dim isPk As String
    Dim pkCount As Long
    
    ' FileSystemObjectの作成
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' TSVファイルの存在確認
    If Not fso.FileExists(tsvFilePath) Then
        MsgBox "エラー: TSVファイルが見つかりません: " & tsvFilePath, vbCritical
        Debug.Print "エラー: TSVファイルが見つかりません: " & tsvFilePath
        Exit Sub
    End If
    
    ' TSVファイル読み込み
    Set ts = fso.OpenTextFile(tsvFilePath, 1, False, -2) ' -2はシステムデフォルトエンコーディング
    lineCount = 0
    ReDim columns(0)
    ReDim pkColumns(0)
    pkCount = 0
    
    ' 1行目: テーブル名
    If Not ts.AtEndOfStream Then
        tableName = Trim(ts.ReadLine)
        lineCount = lineCount + 1
        If tableName = "" Then
            MsgBox "エラー: テーブル名が空です。", vbCritical
            Debug.Print "エラー: テーブル名が空です。"
            ts.Close
            Exit Sub
        End If
    Else
        MsgBox "エラー: TSVファイルが空です。", vbCritical
        Debug.Print "エラー: TSVファイルが空です。"
        ts.Close
        Exit Sub
    End If
    
    ' 2行目以降: カラム情報
    Do While Not ts.AtEndOfStream
        line = Trim(ts.ReadLine)
        lineCount = lineCount + 1
        If line = "" Then
            ' 空行は無視
            GoTo NextLine
        End If
        
        ' タブ区切りで分割
        Dim parts() As String
        parts = Split(line, vbTab)
        If UBound(parts) + 1 < 4 Then
            MsgBox "エラー: 行 " & lineCount & " のフォーマットが不正です。必要な列数: 4, 実際: " & (UBound(parts) + 1), vbCritical
            Debug.Print "エラー: 行 " & lineCount & " のフォーマットが不正です。必要な列数: 4, 実際: " & (UBound(parts) + 1)
            ts.Close
            Exit Sub
        End If
        
        colName = Trim(parts(0))
        colType = Trim(parts(1))
        colLength = Trim(parts(2))
        isPk = UCase(Trim(parts(3)))
        
        ' バリデーション
        If colName = "" Then
            MsgBox "エラー: 行 " & lineCount & " のカラム名が空です。", vbCritical
            Debug.Print "エラー: 行 " & lineCount & " のカラム名が空です。"
            ts.Close
            Exit Sub
        End If
        If colType = "" Then
            MsgBox "エラー: 行 " & lineCount & " のカラム型が空です。", vbCritical
            Debug.Print "エラー: 行 " & lineCount & " のカラム型が空です。"
            ts.Close
            Exit Sub
        End If
        
        ' カラム定義の構築
        Dim colDef As String
        If colLength = "-" Or colLength = "" Then
            colDef = colName & " " & colType
        Else
            If UCase(colType) = "DECIMAL" Then
                colDef = colName & " " & colType & "(" & colLength & ",0)"
            Else
                colDef = colName & " " & colType & "(" & colLength & ")"
            End If
        End If
        If isPk = "Y" Then
            colDef = colDef & " NOT NULL"
            ReDim Preserve pkColumns(pkCount)
            pkColumns(pkCount) = colName
            pkCount = pkCount + 1
        End If
        
        ReDim Preserve columns(i)
        columns(i) = colDef
        i = i + 1
NextLine:
    Loop
    ts.Close
    
    ' カラムが1つも定義されていない場合
    If i = 0 Then
        MsgBox "エラー: カラムが定義されていません。最低1つのカラムが必要です。", vbCritical
        Debug.Print "エラー: カラムが定義されていません。最低1つのカラムが必要です。"
        Exit Sub
    End If
    
    ' SQL生成
    sqlContent = "CREATE TABLE " & tableName & " (" & vbCrLf
    sqlContent = sqlContent & "    " & Join(columns, "," & vbCrLf & "    ") & vbCrLf
    If pkCount > 0 Then
        sqlContent = sqlContent & "    ,CONSTRAINT PK_" & tableName & " PRIMARY KEY (" & Join(pkColumns, ",") & ")" & vbCrLf
    End If
    sqlContent = sqlContent & ");"
    
    ' 出力ファイルパス（YYYYMMDD_hhmmss.sql）
    outputPath = fso.GetParentFolderName(tsvFilePath) & "\" & Format(Now, "YYYYMMDD_HHMMSS") & ".sql"
    
    ' SQLファイル出力
    Set outputFile = fso.CreateTextFile(outputPath, True, True) ' Trueで上書き、TrueでUnicode
    outputFile.Write sqlContent
    outputFile.Close
    
    MsgBox "SQLファイルが正常に出力されました: " & outputPath, vbInformation
    Debug.Print "SQLファイルが正常に出力されました: " & outputPath
    Exit Sub

ErrorHandler:
    If Not ts Is Nothing Then
        If Not ts.AtEndOfStream Then ts.Close
    End If
    MsgBox "エラーが発生しました: " & Err.Description, vbCritical
    Debug.Print "エラーが発生しました: " & Err.Description
End Sub